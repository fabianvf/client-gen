/*
Copyright 2022 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package informergen

import (
	"io"
	"text/template"

	"github.com/kcp-dev/code-generator/pkg/parser"
	"k8s.io/code-generator/cmd/client-gen/types"
)

type GroupInterface struct {
	OutputPackage string
	Group         parser.Group
	Versions      []types.PackageVersion
}

func (g *GroupInterface) WriteContent(w io.Writer) error {
	templ, err := template.New("groupInterface").Funcs(templateFuncs).Parse(groupInterface)
	if err != nil {
		return err
	}

	m := map[string]interface{}{
		"packageName":   g.Group.Name,
		"versions":      g.Versions,
		"outputPackage": g.OutputPackage,
	}
	return templ.Execute(w, m)
}

var groupInterface = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.packageName}}

import (
	{{$outputPackage := .outputPackage -}}
	{{$packageName := .packageName -}}
	{{range $_, $version := .versions -}}
	{{$version.Version}} "{{$outputPackage}}/{{$packageName}}/{{$version.Version}}"
	{{end -}}

	"{{.outputPackage}}/internalinterfaces"
)

// Interface provides access to each of this group's versions.
type Interface interface {
	{{range $_, $version := .versions -}}
		// {{$version.Version.String|upperFirst}} provides access to shared informers for resources in {{$version.Version.String|upperFirst}}.
		{{$version.Version.String|upperFirst}}() {{$version.Version}}.Interface
	{{end}}
}

type group struct {
	factory internalinterfaces.SharedInformerFactory
	namespace string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new Interface.
func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &group{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

{{range .versions}}
// {{.Version.String|upperFirst}} returns a new {{.Version}}.Interface.
func (g *group) {{.Version.String|upperFirst}}() {{.Version}}.Interface {
	return {{.Version}}.New(g.factory, g.namespace, g.tweakListOptions)
}
{{end}}
`
