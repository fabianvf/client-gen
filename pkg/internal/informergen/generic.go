package informergen

import (
	"io"
	"strings"
	"text/template"

	"github.com/kcp-dev/code-generator/namer"
	"github.com/kcp-dev/code-generator/pkg/util"
	"k8s.io/code-generator/cmd/client-gen/types"
)

type Generic struct {
	OutputPackage string
	GroupVersions map[string]types.GroupVersions

	PackageName           string
	GroupVersionResources map[string]map[string][]string
}

func (g *Generic) WriteContent(w io.Writer) error {
	namer := namer.Namer{
		Finalize: util.UpperFirst,
	}

	funcMap := templateFuncs

	funcMap["plural"] = func(input string) string {
		return namer.Name(input)
	}
	funcMap["ToLower"] = func(input string) string {
		return strings.ToLower(input)
	}
	templ, err := template.New("generic").Funcs(funcMap).Parse(genericInformer)
	if err != nil {
		return err
	}

	m := map[string]interface{}{
		"packageName":   g.PackageName,
		"groupVersions": g.GroupVersions,
		"outputPackage": g.OutputPackage,
		"resourcesByGV": g.GroupVersionResources,
	}
	return templ.Execute(w, m)
}

var genericInformer = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.packageName}}

import (
	"fmt"

	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"

	kcpcache "k8s.io/kcp-dev/apimachinery/pkg/cache"

	{{$outputPackage := .outputPackage}}
	{{$packageName := .packageName}}
	{{range $group, $gv := .groupVersions}}
	{{range $_, $version := $gv.Versions}}
	{{$version.Version}} "TODO/{{$version.Package}}"
	{{end}}{{end}}
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kcpcache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericClusterLister.
func (f *genericInformer) Lister() kcpcache.GenericClusterLister {
	return kcpcache.NewGenericClusterLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
		{{range $group, $versions := .resourcesByGV -}}
			{{range $version, $resources := $versions -}}
	// Group={{$group}}, Version={{$version}}
				{{range $resource := $resources -}}
	case {{$group}}{{$version}}.SchemeGroupVersion.WithResource("{{$resource|plural|ToLower}}"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.{{$group|upper}}().{{$version|upper}}().{{$resource}}().Informer()}, nil
				{{end}}
			{{end}}
		{{end -}}
	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
`
