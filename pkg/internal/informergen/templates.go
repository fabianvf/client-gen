package informergen

// TODO
const factoryTemplate = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.PackageName}}

// import (
// 	"reflect"
// 	"time"

// 	"github.com/kcp-dev/kubernetes/src/k8s.io/client-go/tools/cache"
// 	internalinterfaces 

// 	versioned "{{.VersionedClientsetPackage}}"

// 	{{$informerPackage := .InformerPackage}}
// 	{{ range .Groups -}}
// 	{{lower .}} "{{$informerPackage}}/{{lower .}}"
// 	{{ end -}}
// )

`

const genericInformerTemplate = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.PackageName}}

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/kubernetes/src/k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/runtime/schema"

	{{ range .APIs -}}
	{{.Version}} {{.Package}}
	{{ end -}}
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() apimachinerycache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() apimachinerycache.GenericLister {
	return example.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	{{ range .APIs -}}
	case {{.Version}}.SchemeGroupVersion.WithResource("{{lower .Kind}}"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.{{upper .Group}}().{{upper .Version}}().{{upper .Plural}}().Informer()}, nil
	{{ end -}}
	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
`

//
const groupInterfaceTemplate = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

{{$group := (lower .Group)}}
package {{$group}}

import (
{{$groupInformerPackage := (printf "%s/%s" .InformerPackage $group)}}
	informers "{{$groupInformerPackage}}"
{{range $version := .Versions -}}
	informers{{$version}} "{{$groupInformerPackage}}/{{$version}}"
{{end -}}
)

type Interface interface {
{{ range $version := .Versions -}}
	{{upper $version}}() informers{{$version}}.Interface
{{ end -}}
}

type group struct {
	delegate informers.Interface
}

func New(delegate informers.Interface) Interface {
	return &group{delegate: delegate}
}

`

// versionInterfaceTemplate generates <output-dir>/externalversions/<group>/<version>/interface.go
const versionInterfaceTemplate = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.Version}}

import (
	informers "{{.InformerPackage}}/{{.Group}}/{{.Version}}"
)

type Interface interface {
{{ range .APIs -}}
  {{.Plural}}() {{.Kind}}Informer
{{ end -}}
}

type version struct {
	delegate informers.Interface
}

func New(delegate informers.Interface) Interface {
	return &version{delegate: delegate}
}

{{ range .APIs -}}
func (v *version) {{.Plural}}() {{.Kind}}Informer {
	return &{{lower .Kind}}Informer{
		delegate: v.delegate.{{.Kind}}s(),
	}
}
{{ end -}}
`

const informerTemplate = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.Version}}

import (
	"github.com/kcp-dev/kubernetes/src/k8s.io/client-go/tools/cache"

	informers "{{.InformerPackage}}/{{lower .Group}}/{{.Version}}"
	listers "{{.ListerPackage}}/{{lower .Group}}/{{.Version}}"
)

type {{.Kind}}Informer interface {
	Informer() cache.SharedIndexInformer
	Lister() listers.{{.Kind}}Lister
}

{{$informerType := (lower .Kind | printf "%sInformer")}}
type {{$informerType}} struct {
	delegate informers.{{.Kind}}Informer
}

func (r *{{$informerType}}) Informer() cache.SharedIndexInformer {
	return r.delegate.Informer()
}

func (r *{{$informerType}}) Lister() listers.{{.Kind}}Lister {
	return listers.New{{.Kind}}Lister(r.delegate.Informer().GetIndexer())
}
`
