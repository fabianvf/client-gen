/*
Copyright 2022 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package informergen

import (
	"io"
	"text/template"

	"github.com/kcp-dev/code-generator/pkg/parser"
	"k8s.io/code-generator/cmd/client-gen/types"
)

type Informer struct {
	InputPackage     string
	OutputPackage    string
	ClientsetPackage string
	ListerPackage    string
	PackageName      string
	Group            parser.Group
	Version          types.PackageVersion
	Kind             parser.Kind
}

func (i *Informer) WriteContent(w io.Writer) error {
	templ, err := template.New("informer").Funcs(templateFuncs).Parse(informer)
	if err != nil {
		return err
	}
	m := map[string]interface{}{
		"inputPackage":       i.InputPackage,
		"outputPackage":      i.OutputPackage,
		"packageName":        i.PackageName,
		"clientsetPackage":   i.ClientsetPackage,
		"clientsetInterface": "versioned.Interface",
		"listerPackage":      i.ListerPackage,
		"group":              i.Group,
		"version":            i.Version,
		"kind":               &i.Kind,
	}
	return templ.Execute(w, m)
}

var informer = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.packageName}}

import (
	"context"
	time "time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/third_party/informers"

	{{.group.Name}}{{.version.Version}} "{{.inputPackage}}/{{.group.Name}}/{{.version.Version}}"
	versioned "{{.clientsetPackage}}"
	"{{.outputPackage}}/internalinterfaces"
	{{.version.Version}} "{{.listerPackage}}/{{.group.Name}}/{{.version.Version}}"
)

// {{.kind.String}}Informer provides access to a shared informer and lister for
// {{.kind.Plural}}.
type {{.kind.String}}Informer interface {
	Informer() cache.SharedIndexInformer
	Lister() {{.version.Version}}.{{.kind.String}}ClusterLister
}

type {{.kind.String|lowerFirst}}Informer struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	{{if .kind.IsNamespaced}}namespace string{{end}}
}

// New{{.kind.String}}Informer constructs a new informer for {{.kind.String}} type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func New{{.kind.String}}Informer(client {{.clientsetInterface}}{{if .kind.IsNamespaced}}, namespace string{{end}}, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFiltered{{.kind.String}}Informer(client{{if .kind.IsNamespaced}}, namespace{{end}}, resyncPeriod, indexers, nil)
}

// NewFiltered{{.kind.String}}Informer constructs a new informer for {{.kind.String}} type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFiltered{{.kind.String}}Informer(client {{.clientsetInterface}}{{if .kind.IsNamespaced}}, namespace string{{end}}, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.{{.group.GoName|upperFirst}}{{.version.Version.String|upperFirst}}().{{.kind.Plural}}({{if .kind.IsNamespaced}}namespace{{end}}).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.{{.group.GoName|upperFirst}}{{.version.Version.String|upperFirst}}().{{.kind.Plural}}({{if .kind.IsNamespaced}}namespace{{end}}).Watch(context.TODO(), options)
			},
		},
		&{{.group.Name}}{{.version.Version}}.{{.kind.String}}{},
		resyncPeriod,
		indexers,
	)
}

func (f *{{.kind.String|lowerFirst}}Informer) defaultInformer(client {{.clientsetInterface}}, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFiltered{{.kind.String}}Informer(
		client,
		{{if .kind.IsNamespaced}}f.namespace,{{end -}}
		resyncPeriod,
		cache.Indexers{
			kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
			{{if .kind.IsNamespaced}}kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,{{end -}}
		}, 
		f.tweakListOptions,
	)
}

func (f *{{.kind.String|lowerFirst}}Informer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&{{.group.Name}}{{.version.Version}}.{{.kind.String}}{}, f.defaultInformer)
}

func (f *{{.kind.String|lowerFirst}}Informer) Lister() {{.version.Version}}.{{.kind.String}}ClusterLister {
	return {{.version.Version}}.New{{.kind.String}}ClusterLister(f.Informer().GetIndexer())
}
`
